---
swagger: "2.0"
info:
  x-ibm-name: "oauth2-oidc-provider-actual"
  title: "OAuth2 OIDC Provider Actual"
  version: "2.0.0"
schemes:
- "https"
host: "$(catalog.host)"
basePath: "/actual/oidc"
securityDefinitions:
  clientID:
    description: "application's client_id"
    in: "query"
    name: "client_id"
    type: "apiKey"
  clientIdHeader:
    in: "header"
    type: "apiKey"
    name: "X-IBM-Client-Id"
  clientSecretHeader:
    in: "header"
    type: "apiKey"
    name: "X-IBM-Client-Secret"
security:
- clientID: []
paths:
  /oauth2/authorize:
    get:
      produces:
      - "text/html"
      summary: "endpoint for Authorization Code and Implicit grants"
      description: "description"
      parameters:
      - name: "response_type"
        in: "query"
        description: "request an authorization code or or access token (implicit)"
        required: true
        type: "string"
        enum:
        - "code"
        - "token"
      - name: "scope"
        in: "query"
        description: "Scope being requested"
        type: "string"
        required: true
      - name: "redirect_uri"
        in: "query"
        type: "string"
        description: "URI where user is redirected to after authorization"
        required: false
      - name: "state"
        in: "query"
        type: "string"
        description: "This string will be echoed back to application when user is\
          \ redirected"
        required: false
      responses:
        200:
          description: "An HTML form for authentication or authorization of this request."
        302:
          description: "Redirect to the clients redirect_uri containing one of the\
            \ following\n- **authorization code** for Authorization code grant\n-\
            \ **access token** for Implicity grant\n- **error** in case of errors,\
            \ such as the user has denied the request\n"
      security:
      - clientID: []
    post:
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "text/html"
      summary: "submit approval to authorization code or access token"
      description: "Submit resource owners approval (or rejection) for the OAuth2\
        \ Server to issue an\nauthorization code or access token to the application.\n"
      security: []
      parameters:
      - name: "client_id"
        in: "formData"
        description: "application requesting the access code or token"
        required: true
        type: "string"
      - name: "scope"
        in: "formData"
        description: "requested scope of this authorization"
        required: true
        type: "string"
      - name: "resource-owner"
        in: "formData"
        description: "resource owners user name"
        required: true
        type: "string"
      - name: "redirect_uri"
        in: "formData"
        description: "URI the application is requesting this code or token to be redirected\
          \ to"
        required: true
        type: "string"
      - name: "original-url"
        in: "formData"
        description: "URL of the original authorization request"
        required: true
        type: "string"
      - name: "dp-state"
        in: "formData"
        description: "state information provided in the authorization form"
        required: true
        type: "string"
      - name: "dp-data"
        in: "formData"
        description: "state information provided in the authorization form"
        required: true
        type: "string"
      responses:
        200:
          description: "A consent form for oauth processing."
  /oauth2/token:
    post:
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      summary: "Request Access Tokens"
      description: "This endpoint allows requesting an access token following one\
        \ of the flows below:\n- Authorization Code (exchange code for access token)\n\
        - Client Credentials (2-legged, there isnt resource owner information)\n-\
        \ Resource Owner Password Credentials (2-legged, client provides resource\
        \ owner name and password)\n- Refresh Token (exchange refresh token for a\
        \ new access code)\n\nThe table below indicates the required parameters for\
        \ each specific grant_type options.\nEmpty cells indicate a parameter is ignored\
        \ for that specific grant type.\n\nClient authentication:\n- Confidential\
        \ clients should authenticate using HTTP Basic Authentication. Alternatively,\
        \ they may post\n  their client_id and client_secret information as a formData\
        \ parameter.\n- Public clients should send their client_id as formData parameter.\n\
        \n| grant_type           | code       | client_credentials | password    |\
        \ refresh_token |\n|----------------------|------------|--------------------|-------------|---------------|\n\
        | client_id            | required*  | required*          | required*   | required*\
        \     |\n| client_secret        | required*  | required*          | required*\
        \   | required*     |\n| code                 | required   |             \
        \       |             |               |\n| redirect_uri         | required\
        \   |                    |             |               |\n| username     \
        \        |            |                    | required    |               |\n\
        | password             |            |                    | required    | \
        \              |\n| scope                |            | optional         \
        \  | optional    |               |\n| refresh_token        |            |\
        \                    |             | required      |\n\nThe implicit grant\
        \ requests, see /oauth2/authorize.\n"
      security: []
      parameters:
      - name: "grant_type"
        in: "formData"
        description: "Type of grant"
        type: "string"
        required: true
        enum:
        - "authorization_code"
        - "password"
        - "client_credentials"
        - "refresh_token"
      - name: "client_id"
        in: "formData"
        description: "Application client ID, can be provided in formData or using\
          \ HTTP Basic Authentication"
        required: false
        type: "string"
      - name: "client_secret"
        in: "formData"
        description: "Application secret, must be provided in formData or using HTTP\
          \ Basic Authentication"
        required: false
        type: "string"
      - name: "code"
        in: "formData"
        description: "Authorization code provided by the /oauth2/authorize endpoint"
        required: false
        type: "string"
      - name: "redirect_uri"
        in: "formData"
        description: "required only if the redirect_uri parameter was included in\
          \ the authorization request /oauth2/authorize; their values MUST be identical."
        required: false
        type: "string"
      - name: "username"
        in: "formData"
        type: "string"
        description: "Resource owner username"
        required: false
      - name: "password"
        in: "formData"
        type: "string"
        description: "Resource owner password"
        required: false
      - name: "scope"
        in: "formData"
        type: "string"
        description: "Scope being requested"
        required: false
      - name: "refresh_token"
        in: "formData"
        type: "string"
        description: "The refresh token that the client wants to exchange for a new\
          \ access token (refresh_token grant_type)"
        required: false
      responses:
        200:
          description: "json document containing token, etc."
          schema:
            $ref: "#/definitions/access_token_response"
        400:
          description: "json document that may contain additional details about the\
            \ failure"
  /oauth2/introspect:
    post:
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      summary: "Introspect a given access_token supported"
      description: "This endpoint introspects a given access_token\n"
      security:
      - clientIdHeader: []
        clientSecretHeader: []
      parameters:
      - name: "token"
        in: "formData"
        description: "String value of the access_token to be introspected"
        required: true
        type: "string"
      - name: "token_type_hint"
        in: "formData"
        description: "This must contain 'access_token' to indicate the token type"
        required: true
        type: "string"
      responses:
        200:
          description: "json document containing access_token information, etc."
          schema:
            $ref: "#/definitions/introspect_response"
        401:
          description: "failure"
  /oauth2/issued:
    get:
      produces:
      - "application/json"
      summary: "Returns list of permission granted to the owner"
      description: "This endpoint allows the return of all the issued permission for\
        \ a given authenticated owner per owner authentication \ndefined in the x-ibm-configuration\
        \ section\n"
      security:
      - clientIdHeader: []
        clientSecretHeader: []
      responses:
        200:
          description: "json document containing issued information, etc."
          schema:
            $ref: "#/definitions/issued_responses"
        401:
          description: "failure in retreiving issued list"
    delete:
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      summary: "Revoke an application/client permission by the authorized owner"
      description: "Revoke an application/client permission by the authorized owner"
      security:
      - clientIdHeader: []
        clientSecretHeader: []
      parameters:
      - name: "client-id"
        in: "query"
        description: "client-id is the OAuth client_id or application id to be revoked"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
  /oauth2/revoke:
    post:
      responses:
        200:
          description: "response from revocation"
          schema:
            $ref: "#/definitions/token_revoke_response"
      description: "This endpoint revokes a given access_token or refresh_token\n"
      parameters:
      - required: true
        type: "string"
        description: "String value of the access_token, or refresh_token to be revoked"
        in: "formData"
        name: "token"
      - required: true
        type: "string"
        description: "This must contain 'access_token' or 'refresh_token' to indicate\
          \ the token type"
        in: "formData"
        name: "token_type_hint"
      produces:
      - "application/json"
      security:
      - clientSecretHeader: []
        clientIdHeader: []
      consumes:
      - "application/x-www-form-urlencoded"
      summary: "Revoke a given access_token or refresh_token"
x-ibm-configuration:
  testable: true
  enforced: true
  phase: "realized"
  oauth2:
    client-type: "confidential"
    scopes:
      openid: "Enable OIDC"
      weather: "to access weather api"
    grants:
    - "password"
    identity-extraction:
      type: "basic"
    authentication:
      x-ibm-authentication-url:
        url: "https://10.0.0.10/dev/sb/utility/basic-auth/spoon/spoon"
        tls-profile: ""
    authorization:
      type: "authenticated"
    access-token:
      ttl: 3600
    metadata:
      metadata-url:
        url: ""
        tls-profile: ""
    revocation:
      type: "gateway"
    refresh-token:
      count: 2048
      ttl: 2682000
  cors:
    enabled: true
  type: "oauth"
  assembly:
    execute:
    - switch:
        title: "switch"
        case:
        - condition: "(((request.verb==='GET')&&(api.operation.path==='/oauth2/authorize'))||((request.verb==='POST')&&(api.operation.path==='/oauth2/authorize')&&\
            \ new String (apim.getvariable('message.status.code')).startsWith ('302'))"
          execute:
          - xslt:
              title: "xslt"
              input: false
              version: "1.0.0"
              source: "<xsl:stylesheet\n                      xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\
                \n                      version=\"1.0\"\n                        xmlns:dp=\"\
                http://www.datapower.com/extensions\"\n                        xmlns:apim=\"\
                http://www.ibm.com/apimanagement\"\n                        extension-element-prefixes=\"\
                dp apim\"\n                        exclude-result-prefixes=\"dp apim\"\
                >\n                        <xsl:include href=\"local://isp/policy/apim.setvariable-impl.xsl\"\
                \ dp:ignore-multiple=\"yes\"/>\n                        <xsl:template\
                \ match=\"/\">\n                          <xsl:if test=\"starts-with(dp:http-response-header('x-dp-response-code'),\
                \ '302') and\n                                        contains(dp:http-response-header('Location'),\
                \ 'access_token')\">\n                            <xsl:call-template\
                \ name=\"apim:setVariableImpl\">\n                              <xsl:with-param\
                \ name=\"rawName\" select=\"'oidc-location'\"/>\n                \
                \              <xsl:with-param name=\"rawValue\" select=\"dp:http-response-header('Location')\"\
                />\n                              <xsl:with-param name=\"action\"\
                \ select=\"'set'\"/>\n                            </xsl:call-template>\n\
                \                            <xsl:call-template name=\"apim:setVariableImpl\"\
                >\n                              <xsl:with-param name=\"rawName\"\
                \ select=\"'oidc-credential'\"/>\n                              <xsl:with-param\
                \ name=\"rawValue\" select=\"string(dp:variable('var://context/_apimgmt/authenticated-username'))\"\
                />\n                              <xsl:with-param name=\"action\"\
                \ select=\"'set'\"/>\n                            </xsl:call-template>\n\
                \                          </xsl:if>\n                        </xsl:template>\n\
                \                      </xsl:stylesheet>"
        - condition: "((request.verb==='POST')&&(api.operation.path==='/oauth2/token'))"
          execute:
          - gatewayscript:
              title: "gatewayscript"
              version: "1.0.0"
              source: "var _apimgmt = session.name('_apimgmt');\n\n              \
                \        var grantType =\n                      _apimgmt.getVariable('requested-grant-type');\n\
                \n\n                      if (grantType === 'password' ||\n      \
                \                    grantType === 'code') {\n                   \
                \     // get scope\n                        var splitScope = (apim.getvariable('message.body').scope\
                \ || '').split(' ');\n                        for (var i = 0; i <\
                \ splitScope.length; i++) {\n                          if (splitScope[i]\
                \ === 'openid') {\n                            var userIdentity =\
                \ _apimgmt.getVariable('authenticated-username');\n              \
                \              apim.setvariable('oidc-credential', userIdentity, 'set');\n\
                \                          }\n                        }\n        \
                \              }"
        version: "1.0.0"
    - if:
        title: "if"
        condition: "apim.getvariable('oidc-credential') !== undefined"
        execute:
        - set-variable:
            title: "set-variable"
            actions:
            - set: "iss.claim"
              value: "Spoon Bank Inc"
            - set: "private.claim"
              value: "{\"disclaimer\":\"for demo purpose\"}"
            - set: "hs256-key"
              value: "{ \"alg\": \"HS256\",   \"kty\": \"oct\",   \"use\": \"sig\"\
                ,   \"k\": \"o5yErLaE-dbgVpSw65Rq57OA9dHyaF66Q_Et5azPa-XUjbyP0w9iRWhR4kru09aFfQLXeIODIN4uhjElYKXt8n76jt0Pjkd2pqk4t9abRF6tnL19GV4pflfL6uvVKkP4weOh39tqHt4TmkBgF2P-gFhgssZpjwq6l82fz3dUhQ2nkzoLA_CnyDGLZLd7SZ1yv73uzfE2Ot813zmig8KTMEMWVcWSDvy61F06vs_6LURcq_IEEevUiubBxG5S2akNnWigfpbhWYjMI5M22FOCpdcDBt4L7K1-yHt95Siz0QUb0MNlT_X8F76wH7_A37GpKKJGqeaiNWmHkgWdE8QWDQ\"\
                ,   \"kid\": \"hs256-key\" }"
            version: "1.0.0"
        - jwt-generate:
            title: "jwt-generate"
            iss-claim: "iss.claim"
            exp-claim: 3600
            version: "1.0.0"
            sub-claim: "oidc-credential"
            aud-claim: "client.app.id"
            private-claims: "private.claim"
            jws-alg: "HS256"
            jws-jwk: "hs256-key"
            jwt: "idtoken"
            description: "generate IDToken"
            jti-claim: true
            jwe-enc: "A128CBC-HS256"
            jwe-alg: "A256KW"
        - gatewayscript:
            title: "gatewayscript"
            version: "1.0.0"
            source: " var grantType =\n                  session.name('_apimgmt').getVariable('requested-grant-type');\n\
              \n\n                  if (grantType === 'implicit') {\n            \
              \        // regression in 5070 will not allow access, and modification\
              \ to the location header\n                    var location = apim.getvariable('oidc-location')\
              \ + '&id_token=' + apim.getvariable(\"idtoken\");\n                \
              \    // work around is to use xslr\n                    apim.setvariable('oidc-location',\
              \ location);\n                  }\n\n                  else {\n    \
              \                var token = apim.getvariable(\"message.body\");\n \
              \                   token[\"id_token\"] = apim.getvariable(\"idtoken\"\
              );\n                    apim.setvariable(\"message.body\", JSON.stringify(token));\n\
              \                  }"
        version: "1.0.0"
    - if:
        title: "if"
        condition: "new String (apim.getvariable('message.status.code')).startsWith('302')"
        execute:
        - xslt:
            title: "xslt"
            input: false
            version: "1.0.0"
            source: "<xsl:stylesheet\n                        xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\
              \n                        version=\"1.0\"\n                        \
              \  xmlns:dp=\"http://www.datapower.com/extensions\"\n              \
              \            xmlns:apim=\"http://www.ibm.com/apimanagement\"\n     \
              \                     extension-element-prefixes=\"dp apim\"\n     \
              \                     exclude-result-prefixes=\"dp apim\">\n       \
              \                   <xsl:include href=\"local://isp/policy/apim.setvariable-impl.xsl\"\
              \ dp:ignore-multiple=\"yes\"/>\n                          <xsl:template\
              \ match=\"/\">\n                            <xsl:variable name=\"loc\"\
              \ select=\"apim:getVariableImpl('oidc-location')\"/>\n             \
              \               <dp:set-http-response-header name=\"'Location'\" value=\"\
              $loc\"/>\n                          </xsl:template>\n              \
              \          </xsl:stylesheet>"
        version: "1.0.0"
    catch: []
definitions:
  access_token_response:
    type: "object"
    additionalProperties: false
    required:
    - "token_type"
    - "access_token"
    - "expires_in"
    properties:
      token_type:
        enum:
        - "bearer"
      access_token:
        type: "string"
      expires_in:
        type: "integer"
      scope:
        type: "string"
      refresh_token:
        type: "string"
  introspect_response:
    type: "object"
    additionalProperties: false
    required:
    - "active"
    - "client_id"
    - "client_name"
    - "username"
    - "sub"
    - "exp"
    - "expstr"
    - "iat"
    - "nbf"
    - "nbfstr"
    - "scope"
    properties:
      active:
        type: "boolean"
      client_id:
        type: "string"
      client_name:
        type: "string"
      username:
        type: "string"
      sub:
        type: "string"
      exp:
        type: "string"
      expstr:
        type: "string"
      iat:
        type: "string"
      nbf:
        type: "string"
      nbfstr:
        type: "string"
      scope:
        type: "string"
      miscinfo:
        type: "string"
      consented_on:
        type: "string"
      consented_on_str:
        type: "string"
      grant_type:
        type: "string"
  issued_response:
    type: "object"
    additionalProperties: false
    required:
    - "clientId"
    - "owner"
    - "scope"
    - "issuedAt"
    - "expiredAt"
    - "refreshTokenIssued"
    properties:
      clientId:
        type: "string"
      clientName:
        type: "string"
      owner:
        type: "string"
      scope:
        type: "string"
      issuedAt:
        type: "string"
      expiredAt:
        type: "string"
      refreshTokenIssued:
        type: "boolean"
      miscInfo:
        type: "string"
      consentedOn:
        type: "string"
      appId:
        type: "string"
      org:
        type: "string"
      orgId:
        type: "string"
      provider:
        type: "string"
      providerId:
        type: "string"
      catalog:
        type: "string"
      catalogId:
        type: "string"
  issued_responses:
    type: "array"
    items:
      $ref: "#/definitions/issued_response"
  token_revoke_response:
    additionalProperties: false
    type: "object"
    properties:
      status:
        type: "string"
